---
- name: Create pre-patch backup
  archive:
    path: "{{ tomcat_home }}"
    dest: "{{ app_home }}/tomcat_pre_patch_{{ ansible_date_time.iso8601 }}.tar.gz"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
  when: not ansible_check_mode

- name: Check tomcat current version
  command: "{{ tomcat_home }}/bin/version.sh"
  register: version

- name: Tomcat current version
  debug:
    msg: "Actual version '{{ version.stdout_lines[6] }}'"

- name: Download tomcat target version
  become_user: "{{ machine_user }}"
  get_url:
    url: "https://archive.apache.org/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_target_version }}/bin/apache-tomcat-{{ tomcat_target_version }}.tar.gz"
    dest: "{{ app_home }}/apache-tomcat-{{ tomcat_target_version }}.tar.gz"
    mode: 0755
  register: download_result
  failed_when:
    - download_result.status_code is defined
    - download_result.status_code != 200
  retries: 3
  delay: 5

- name: Unpack new tomcat
  become_user: "{{ machine_user }}"
  unarchive:
    src: "{{ app_home }}/{{ tomcat_target_download_file }}.tar.gz"
    dest: "{{ app_home }}"
    remote_src: yes

- name: Link new tomcat
  become_user: "{{ machine_user }}"
  file:
    src: "{{ app_home }}/{{ tomcat_target_download_file }}"
    dest: "{{ tomcat_home }}"
    state: link
    mode: 0755
    force: yes

- name: Copy conf and webapps from previous version to newly one
  become_user: "{{ machine_user }}"
  copy:
    src: "{{ app_home }}/{{ tomcat_download_file }}/{{ item }}"
    dest: "{{ tomcat_home }}/"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    remote_src: yes
    backup: true
  with_items:
    - "conf"
    - "webapps"

- name: Copy essentials files from old to new tomcat
  become_user: "{{ machine_user }}"
  copy:
    src: "{{ app_home }}/{{ tomcat_download_file }}/bin/{{ item }}"
    dest: "{{ tomcat_home }}/bin/"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    remote_src: yes
    backup: true
  with_items:
    - "setenv.sh"
    - "startup.sh"
    - "shutdown.sh"
    - "catalina.sh"
    - "setclasspath.sh"

- name: Check tomcat newest version
  command: "{{ tomcat_home }}/bin/version.sh"
  register: version

- name: Tomcat newest version
  debug:
    msg: "Actual version '{{ version.stdout_lines[6] }}'"

- name: Stop Tomcat (Kill process)
  become_user: "{{ machine_user }}"
  shell: "ps -ef | grep '[j]ava.*tomcat' | awk '{print $2}' | xargs -r kill -9"

- name: Start Tomcat
  become_user: "{{ machine_user }}"
  shell: "setsid {{ tomcat_home }}/bin/startup.sh & disown"
  args:
    chdir: "{{ tomcat_home }}"

- name: "Check tomcat status after patch"
  wait_for:
    host: "{{ tomcat_address }}"
    port: "{{ tomcat_port }}"
    state: started
    delay: 10
    timeout: 120

- name: Validate Tomcat installation
  block:
    - name: Verify Tomcat process
      shell: "ps -ef | grep '[j]ava.*tomcat'"
      register: tomcat_process
      until: tomcat_process.rc == 0
      retries: 3
      delay: 5

    - name: Check Tomcat logs for errors
      shell: "grep -i 'error\\|exception' {{ tomcat_home }}/logs/catalina.out"
      register: log_check
      failed_when: log_check.rc == 0
      changed_when: false
  rescue:
    - name: Restore from backup on failure
      unarchive:
        src: "{{ app_home }}/tomcat_pre_patch_{{ ansible_date_time.iso8601 }}.tar.gz"
        dest: "{{ app_home }}"
        remote_src: yes
      notify: restart tomcat
